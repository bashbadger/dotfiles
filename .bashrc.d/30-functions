# ~/.bashrc.d/30-functions: bash functions.

# SSH repeatedly until a host becomes available
ssh_until() {
    local attempt=1
    echo "Attempting to SSH: $*"

    until ssh -o ConnectTimeout=10 -o BatchMode=yes "$@"; do
      echo "[$attempt] SSH connection failed at $(date +%T). Retrying in 10 seconds..."
      sleep 10
      ((attempt++))
    done
}

# Quickly find files in current directory
qkfind() {
    [[ $# -eq 1 ]] || {
    echo "Provide one argument"
    return 1 ; }
    find . -iname "*${1}*"
}

# Quickly grep recursively in current directory
qkgrep() {
    [[ $# -eq 1 ]] || {
    echo "Provide one argument"
    return 1 ; }
    grep_options=( \
                   --ignore-case \
                   --color \
                   --recursive \
                 )
    string="$1"
    printf "%sSearching for \"${string}\" in ${PWD}...\n\n"
    grep "${grep_options[@]}" "$string"
}

# Create a temporary directory and copy any arguments in to it
cptmp() {
    local tmp_dir
    tmp_dir="$(mktemp --directory)"
    [[ -n "$1" ]] \
      && cp --recursive "$@" "$tmp_dir" \
      && cd "$tmp_dir"
}

# Create backup of file
backup() {
  if [ -z "$1" ]; then
    echo "Usage: backup <file>"
    return 1
  fi

  cp --verbose "$1" "$1.bak"
}

# Dictionary lookup
lkup() {
    curl dict://dict.org/d:"${1}"
}

# Save commands for later
sl() {
    local outfile=~/.saved_cmds.txt
    printf '[%(%Y-%m-%d)T] ' >>$outfile
    fc -ln -1 | sed 's/^\s*//' >>$outfile
    echo Saved previous command to $outfile
}

# Search saved commands
slg() {
    < ~/.saved_cmds.txt \
      grep "$@"
}

# Preferred yt-dlp options
yt-dlp() {
    command yt-dlp \
    --embed-thumbnail \
    --merge-output-format mp4 \
    "$@"
}

# IP grep
grep_ips() {
    # Add `-o` when invoking to only print IPs
    # (regex isn't perfect, but good enough)
    grep --extended-regexp '([[:digit:]]{1,3}\.){3}[[:digit:]]{1,3}' "$@"
}

# Use a short prompt
shortprompt() {
    oldps1="$PS1"
    PS1='$ '
}

# Return to original prompt
longprompt() {
    PS1="${oldps1:-[\u@\h \W]\$ }"
}

# Boot to Windows on dual-boot system
bootwin () {
    local win_entry=$(efibootmgr | grep -i "windows boot manager" | head -n1 | grep -o '^Boot[0-9A-F]\{4\}');
    local boot_num=${win_entry#Boot}
    if sudo efibootmgr --bootnext $boot_num >/dev/null; then
        echo "Rebooting in 3 seconds... (Ctrl+C to cancel)"
        sleep 3
        reboot
    else
        echo "Error: Failed to set next boot entry" >&2
        return 1
    fi
}

# vim: filetype=sh
